# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types, html, F
# from aiogram.filters.command import Command, CommandObject
# from config_reader import config
# from datetime import datetime
#
# # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
# # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
# bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="HTML")
# # bot = Bot(token="6151411579:AAEAjP9IC-vID_OtvVwOaQIbcfiRCmLFV5Q")
# # –î–∏—Å–ø–µ—Ç—á–µ—Ä
# dp = Dispatcher()
#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     await message.answer("Hello!")
#
#
# @dp.message(Command("answer"))
# async def cmd_answer(message: types.Message):
#     await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
#
#
# @dp.message(Command("reply"))
# async def cmd_reply(message: types.Message):
#     await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')
#
#
# @dp.message(Command("dice"))
# async def cmd_dice(message: types.Message):
#     await message.answer_dice(emoji="üé≤")
#
#
# @dp.message(Command("test"))
# async def any_message(message: types.Message):
#     await message.answer("Hello, <b>world</b>!", parse_mode="HTML")
#     await message.answer("Hello, *world*\!", parse_mode="MarkdownV2")
#
#
# @dp.message(Command("name"))
# async def cmd_name(message: types.Message, command: CommandObject):
#     if command.args:
#         await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(html.quote(command.args))}")
#     else:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /name ")
#
#
# # @dp.message(F.text)
# # async def echo_with_time(message: types.Message):
# #     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ü–ö
# #     time_now = datetime.now().strftime('%H:%M')
# #     # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
# #     added_text = html.underline(f"–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}")
# #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
# #     await message.answer(f"{message.html_text}\n\n{added_text}")
#
#
# @dp.message(F.text)
# async def extract_data(message: types.Message):
#     data = {
#         "url": "eremkin.ru",
#         "email": "eremkin@gmail.com",
#         "code": "eremkin12345",
#     }
#     entities = message.entities or []
#     for item in entities:
#         if item.type in data.keys():
#             # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
#             # data[item.type] = message.text[item.offset : item.offset+item.length]
#             # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
#             data[item.type] = item.extract_from(message.text)
#     await message.answer(
#         "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª: \n"
#         f"URL: {html.quote(data['url'])} \n"
#         f"E-mail: {html.quote(data['email'])} \n"
#         f"–ü–∞—Ä–æ–ª—å: {html.quote(data['code'])} \n"
#     )
#
#
# # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
# async def main():
#     await dp.start_polling(bot)
#
#
# if __name__ == "__main__":
#     asyncio.run(main())


def multiply_num(list_numbers: list) -> int:
    result = [list_numbers[number]*list_numbers[number+1] for number in range(len(list_numbers)-1)]
    return result


list_numbers1 = [2, -3, 6]
print(multiply_num(list_numbers1))